# 워크 플로우 이름
name: CI/CD with Gradle 


# 워크 플로우가 언제 실행 될지를 정한다.
on:
  pull_request:
    branches: [ "develop" ]
    types: [closed]


# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read

# 워크플로우에서 할 작업 정의한다.
jobs:

  # 작업 환경 = 우분투 최신 버전
  build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    # 깃허브에서 제공하는 checkout 엑션 사용
    steps:
    - uses: actions/checkout@v3

    # JDK 17 설정한당
    # temurin = Adoptium에서 제공하는 JDK
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Create credentials
      run: |
        mkdir -p credentials
        echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > credentials/vision.json
        echo "${{ secrets.FIREBASE_CREDENTIAL_JSON }}" > credentials/firebase.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=credentials/vision.json" > credentials/.env
        echo "FIREBASE_CREDENTIAL_JSON_PATH=credentials/firebase.json" >> credentials/.env
    
    - name: Upload credentials artifact
      uses: actions/upload-artifact@v4
      with:
        name: credentials
        path: credentials
        
    - name: Create application.yml
      run: |
        mkdir -p src/main/resources
        echo "
        spring:
          application:
            name: keeply
          datasource:
            url: jdbc:h2:file:./data/keeply-db;DB_CLOSE_ON_EXIT=FALSE
            driver-class-name: org.h2.Driver
            username: sa
            password:
          h2:
            console:
              enabled: true
          jpa:
            hibernate:
              ddl-auto: update
            properties:
              hibernate:
                dialect: org.hibernate.dialect.H2Dialect
          data:
            redis:
              host: localhost
              port: 6379
          jackson:
            date-format: yyyy-MM-dd'T'HH:mm:ss
            time-zone: Asia/Seoul
            serialization:
              WRITE_DATES_AS_TIMESTAMPS: false
        cloud:
          aws:
            region:
              static: ap-northeast-2
            s3:
              bucket: keeply-s3-bucket
        jwt:
          secret: ${{ secrets.JWT_SECRET }}
          access-token:
            expiration: 999999999999999
          refresh-token:
            expiration: 1209600
        " > src/main/resources/application.yml
        
    
    # gradle wrapper 파일에 실행 권한을 부여
    # gradle wrapper = 개발자가 특정 버전의 Gradle을 미리 설치하지 않고도 Gradle 빌드를 실행할 수 있게 해주는 편리한 도구        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.6.0
      with:
        arguments: build -x test

    # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: keeply
        path: build/libs/keeply-0.0.1-SNAPSHOT.jar

  # 배포 **
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: keeply
        path: build/libs/

    
    - name: Download credentials
      uses: actions/download-artifact@v4
      with:
        name: credentials
        path: ./credentials
    
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/keeply-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/keeply-0.0.1-SNAPSHOT.jar
        scp -i private_key.pem -o StrictHostKeyChecking=no ./credentials/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/credentials/
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "pgrep java | xargs -r kill -9; /home/${{ secrets.EC2_USERNAME }}/deploy.sh"
        rm -f private_key.pem
